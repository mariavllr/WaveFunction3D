// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

/*
|-------------------------------------------------------------------------------|
| Arrays in HLSL must have an explicit lenght given at their declaration        |
| so the maximum number of neighbours is defined as a constant.                 |
|-------------------------------------------------------------------------------|
*/
#define MAX_NEIGHBOURS 44

struct Cell3DStruct
{
    uint colapsed;
    // Number of tiles that can be placed in the cell
    // (array lenghts are fixed we can't use .lenght)
    uint entropy;
    /* Possible tiles
    |-------------------------------------------------------------------------------|
    | The possible tiles are stored in a uint array, each uint containing the index |
    | of a tile in the tileObjects array.                                           |
    |-------------------------------------------------------------------------------|
    */
    int tileOptions[MAX_NEIGHBOURS];
};

struct Tile3DStruct
{
    int tyleType; // Hascode of the tile
    int probability;
    float3 rotation;

    // Neighbours (these are the indexes of the tiles in the tileObjects array)
    int upNeighbours[MAX_NEIGHBOURS];
    int rightNeighbours[MAX_NEIGHBOURS];
    int downNeighbours[MAX_NEIGHBOURS];
    int leftNeighbours[MAX_NEIGHBOURS];
    int aboveNeighbours[MAX_NEIGHBOURS];
    int belowNeighbours[MAX_NEIGHBOURS];

    // Excluded neighbours
    int excludedNeighboursUp[MAX_NEIGHBOURS];       // Hashcodes of the tiles
    int excludedNeighboursRight[MAX_NEIGHBOURS];    // Hashcodes of the tiles
    int excludedNeighboursDown[MAX_NEIGHBOURS];     // Hashcodes of the tiles
    int excludedNeighboursLeft[MAX_NEIGHBOURS];     // Hashcodes of the tiles
};

// Values from de C# code
uint dimensionsX, dimensionsY, dimensionsZ;
uint iterations;
uint floorTile;
uint emptyTile;
uint seed;

// Save the cell with less entropy
uint minEntropy;
uint minEntropyIndex;

// Buffers
StructuredBuffer<Cell3DStruct> gridComponents;
StructuredBuffer<Tile3DStruct> tileObjects;
RWStructuredBuffer<Cell3DStruct> output;

// We need arrays of fixed lenght in HLSL, so -1 will be our null value
void ClearArray(inout int array[MAX_NEIGHBOURS])
{
    for (uint i = 0; i < MAX_NEIGHBOURS; i++)
    {
        array[i] = -1;
    }
}

// We need to have a modifiable copy of the grid so we copy it to another buffer
void CopyToOutput(uint2 initialIndex)
{
    for(uint i = initialIndex.x * dimensionsX + initialIndex.y * dimensionsZ; i < dimensionsX * dimensionsY * dimensionsZ; i++)
    {
        output[i] = gridComponents[i];
    }
}

void CreateSolidFloor(uint2 initialIndex)
{
    uint y = 0;
    for (uint z = initialIndex.y; z < dimensionsZ; z++)
    {
        for (uint x = initialIndex.x; x < dimensionsX; x++)
        {
            uint index = x + (z * dimensionsX) + (y * dimensionsX * dimensionsZ);
            output[index] = output[index];
            output[index].colapsed = (uint) 1;
            output[index].entropy = 1;
            ClearArray(output[index].tileOptions);
            output[index].tileOptions[0] = floorTile;
            iterations++;
        }
    }
}

void CreateSolidCeling(uint2 initialIndex)
{
    uint y = dimensionsY-1;
    for (uint z = 0; z < dimensionsZ; z++)
    {
        for (uint x = 0; x < dimensionsX; x++)
        {
            uint index = x + (z * dimensionsX) + (y * dimensionsX * dimensionsZ);
            output[index] = output[index];
            output[index].colapsed = (uint) 1;
            output[index].entropy = 1;
            ClearArray(output[index].tileOptions);
            output[index].tileOptions[0] = emptyTile;
            iterations++;
        }
    }
}

bool ArrayContains(int array[MAX_NEIGHBOURS], int value)
{
    for (int i = 0; i < MAX_NEIGHBOURS; i++)
    {
        if(array[i] == -1) return false;
        if (array[i] == value) return true;
    }
    return false;
}

void CheckNeighbours(uint x, uint y, uint z)
{
    uint up, down, left, right, above, below;
    uint index = x + (z * dimensionsX) + (y * dimensionsX * dimensionsZ);
    right = (x + 1) + (z * dimensionsX) + (y * dimensionsX * dimensionsZ);
    left = (x - 1) + (z * dimensionsX) + (y * dimensionsX * dimensionsZ);
    up = x + ((z + 1) * dimensionsX) + (y * dimensionsX * dimensionsZ);
    down = x + ((z - 1) * dimensionsX) + (y * dimensionsX * dimensionsZ);
    above = x + (z * dimensionsX) + ((y + 1) * dimensionsX * dimensionsZ);
    below = x + (z * dimensionsX) + ((y - 1) * dimensionsX * dimensionsZ);

    if(output[index].colapsed == 1) return;

    /* Adaptation of the get neighbours method in the C# code
    |-------------------------------------------------------------------------------|
    | In the original code, we use a method that concatenates all the possible      |
    | neighbours in each of the possible tiles in the position of each neighbour    |
    | that is used to check the intersection between that list and the list of      |
    | overall tile options.                                                         |
    |-------------------------------------------------------------------------------|
    | In the HLSL code, to avoid lists and its manipulations, we will go through    |
    | all the possible neighbours and check if they are in any of the arrays of     |
    | neighbours of all the possible tiles of each neighbour.                       |
    |-------------------------------------------------------------------------------|
    */
    uint optionIndex = 0;
    uint validOptionsIndex = 0;
    int validOptions[MAX_NEIGHBOURS];
    ClearArray(validOptions);
    while (optionIndex < MAX_NEIGHBOURS && output[index].tileOptions[optionIndex] != -1)
    {
        bool isNeighbour = true;
        // Checks the down cell
        if(z > 0)
        {
            for(int i = 0; i < MAX_NEIGHBOURS; i++)
            {
                // Check if we have reached the end of the array of tile options
                if(output[down].tileOptions[i] == -1)
                {
                    // If we get to the end, it means that the option is not
                    // in the lists of possible neighbours of all the possible neighbour
                    // tiles, therefore it is not valid so we skip it
                    isNeighbour = false;
                    optionIndex++;
                    break;
                }

                isNeighbour = ArrayContains(tileObjects[output[down].tileOptions[i]].upNeighbours, output[index].tileOptions[optionIndex]);
                if(isNeighbour) break;
            }
        }
        // Checks the right cell
        if(isNeighbour && x < dimensionsX - 1)
        {
            for(int i = 0; i < MAX_NEIGHBOURS; i++)
            {
                // Check if we have reached the end of the array of tile options
                if(output[right].tileOptions[i] == -1)
                {
                    // If we get to the end, it means that the option is not
                    // in the lists of possible neighbours of all the possible neighbour
                    // tiles, therefore it is not valid so we skip it
                    isNeighbour = false;
                    optionIndex++;
                    break;
                }

                isNeighbour = ArrayContains(tileObjects[output[right].tileOptions[i]].leftNeighbours, output[index].tileOptions[optionIndex]);
                if(isNeighbour) break;
            }
        }
        // Checks the up cell
        if(isNeighbour && z < dimensionsZ - 1)
        {
            for(int i = 0; i < MAX_NEIGHBOURS; i++)
            {
                // Check if we have reached the end of the array of tile options
                if(output[up].tileOptions[i] == -1)
                {
                    // If we get to the end, it means that the option is not
                    // in the lists of possible neighbours of all the possible neighbour
                    // tiles, therefore it is not valid so we skip it
                    isNeighbour = false;
                    optionIndex++;
                    break;
                }

                isNeighbour = ArrayContains(tileObjects[output[up].tileOptions[i]].downNeighbours, output[index].tileOptions[optionIndex]);
                if(isNeighbour) break;
            }
        }
        // Checks the left cell
        if(isNeighbour && x > 0)
        {
            for(int i = 0; i < MAX_NEIGHBOURS; i++)
            {
                // Check if we have reached the end of the array of tile options
                if(output[left].tileOptions[i] == -1)
                {
                    // If we get to the end, it means that the option is not
                    // in the lists of possible neighbours of all the possible neighbour
                    // tiles, therefore it is not valid so we skip it
                    isNeighbour = false;
                    optionIndex++;
                    break;
                }

                isNeighbour = ArrayContains(tileObjects[output[left].tileOptions[i]].rightNeighbours, output[index].tileOptions[optionIndex]);
                if(isNeighbour) break;
            }
        }
        // Checks the below cell
        if(isNeighbour && y > 0)
        {
            for(int i = 0; i < MAX_NEIGHBOURS; i++)
            {
                // Check if we have reached the end of the array of tile options
                if(output[below].tileOptions[i] == -1)
                {
                    // If we get to the end, it means that the option is not
                    // in the lists of possible neighbours of all the possible neighbour
                    // tiles, therefore it is not valid so we skip it
                    isNeighbour = false;
                    optionIndex++;
                    break;
                }

                isNeighbour = ArrayContains(tileObjects[output[below].tileOptions[i]].aboveNeighbours, output[index].tileOptions[optionIndex]);
                if(isNeighbour) break;
            }
        }
        // Checks the above cell
        if(isNeighbour && y < dimensionsY - 1)
        {
            for(int i = 0; i < MAX_NEIGHBOURS; i++)
            {
                // Check if we have reached the end of the array of tile options
                if(output[above].tileOptions[i] == -1)
                {
                    // If we get to the end, it means that the option is not
                    // in the lists of possible neighbours of all the possible neighbour
                    // tiles, therefore it is not valid so we skip it
                    isNeighbour = false;
                    optionIndex++;
                    break;
                }

                isNeighbour = ArrayContains(tileObjects[output[above].tileOptions[i]].belowNeighbours, output[index].tileOptions[optionIndex]);
                if(isNeighbour) break;
            }
        }
        if(isNeighbour)
        {
            validOptions[validOptionsIndex] = output[index].tileOptions[optionIndex];
            validOptionsIndex++;
        }
        optionIndex++;
    }

    // We assign the new options to the cell
    output[index].tileOptions = validOptions;
    output[index].entropy = validOptionsIndex;
    if(validOptionsIndex < minEntropy)
    {
        minEntropy = validOptionsIndex;
        minEntropyIndex = index;
    }
}

bool CollapseCell(int cellToCollapseIndex)
{
    // Collapse the cell
    output[cellToCollapseIndex].colapsed = 1;

    if(output[cellToCollapseIndex].tileOptions[0] == -1) return false;

    int max = 0;
    for(max = 0; max < MAX_NEIGHBOURS; max++)
    {
        if(output[cellToCollapseIndex].tileOptions[max] == -1)
        {
            if(max > 0) max--;
            break;
        }
    }

    int temp = output[cellToCollapseIndex].tileOptions[seed % (max + 1)];
    ClearArray(output[cellToCollapseIndex].tileOptions);
    output[cellToCollapseIndex].tileOptions[0] = temp;
    output[cellToCollapseIndex].entropy = 1;
    output[cellToCollapseIndex] = output[cellToCollapseIndex];
    return true;
}

void UpdateGeneration(uint2 initialIndex)
{
    while (iterations < dimensionsX * dimensionsZ * dimensionsY)
    {
        minEntropy = MAX_NEIGHBOURS + 1;
        minEntropyIndex = 0;
        for (uint y = 0; y < dimensionsY; y++)
        {
            for (uint z = initialIndex.y; z < dimensionsZ; z++)
            {
                for (uint x = initialIndex.x; x < dimensionsX; x++)
                {
                    CheckNeighbours(x, y, z);
                }
            }
        }
        iterations++;
        // If there's an incompatibility, we restart everything
        if(CollapseCell(minEntropyIndex)) continue;
        else
        {
            iterations = 0;
            CopyToOutput(initialIndex);
            CreateSolidFloor(initialIndex);
            CreateSolidCeling(initialIndex);
        }
    }
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint2 initialIndex = id.xy;
    CopyToOutput(initialIndex);
    CreateSolidFloor(initialIndex);
    CreateSolidCeling(initialIndex);
    UpdateGeneration(initialIndex);
    output[0].entropy = minEntropy;
}